from aiogram.types import Message
from aiogram.filters import Command
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

from keyboards.all_kb import currency_services_kb
from utils.asset_states import CheckCurrency
from asset_service.currency_service import get_exchange_rate

currency_router = Router()


@currency_router.callback_query(F.data == "üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫")
async def cmd_stock_services_list(callback: CallbackQuery):
    await callback.message.answer(
        '–ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –∏–ª–∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫—É—Ä—Å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É',
        reply_markup=currency_services_kb().as_markup())
    await callback.answer()


@currency_router.message(Command('check_exchange'))
async def cmd_exchange_start(message: Message, state: FSMContext):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–ª—é—Ç—ã')
    await state.set_state(CheckCurrency.asset_id_response)


@currency_router.callback_query(F.data == "/check_exchange")
async def check_stock_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–ª—é—Ç—ã')
    await state.set_state(CheckCurrency.asset_id_response)


@currency_router.message(StateFilter(CheckCurrency.asset_id_response))
async def cmd_exchange_rate(message: Message, state: FSMContext):
    currency = message.text.upper()
    exchange_rate = await get_exchange_rate(currency)
    if exchange_rate:
        await message.reply(f'–ö—É—Ä—Å {currency} –∫ —Ä—É–±–ª—é —Å–µ–≥–æ–¥–Ω—è: {exchange_rate} —Ä—É–±.',
                            reply_markup=currency_services_kb().as_markup())
        await state.clear()
    else:
        await message.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã.',
                            reply_markup=currency_services_kb().as_markup())
        await state.clear()
