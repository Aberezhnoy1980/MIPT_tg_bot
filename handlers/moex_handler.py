from datetime import datetime
import logging

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.filters.state import StatesGroup, State, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from keyboards.all_kb import stock_services_kb
from stock_service.stock import Stock
from stock_service.stock_service import check_stock_existence, get_stock_price_ru, get_stock_price_world, add_stock, \
    calc_portfolio_diff

logger = logging.getLogger(__name__)
stock_router = Router()


class CheckStockStates(StatesGroup):
    StockID = State()


class AddStockStates(StatesGroup):
    StockID = State()
    StockPrice = State()
    StockQuantity = State()


@stock_router.callback_query(F.data == "üìà–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫")
async def cmd_stock_services_list(callback: CallbackQuery):
    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ü–µ–Ω–Ω—ã–º–∏ –±—É–º–∞–≥–∞–º–∏ MOEX: —É–∑–Ω–∞—Ç—å —Ç–µ–∫—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å –±—É–º–∞–≥—É –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å, '
        '–ø–æ—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è',
        reply_markup=stock_services_kb().as_markup())
    await callback.answer()


@stock_router.message(Command('checkStock'))
async def check_stock_start(message: Message, state: FSMContext):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏')
    await state.set_state(CheckStockStates.StockID)


@stock_router.callback_query(F.data == "/checkStock")
async def check_stock_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏')
    await state.set_state(CheckStockStates.StockID)
    await callback.answer()


@stock_router.message(StateFilter(CheckStockStates.StockID))
async def check_stock_id(message: Message, state: FSMContext):
    stock_id = message.text.upper()

    stock_existence = await check_stock_existence(stock_id)
    if stock_existence:
        stock_price, stock_currency = await get_stock_price_ru(stock_id)
        if stock_price is not None:
            await message.reply(
                f"–¶–µ–Ω–Ω–∞—è –±—É–º–∞–≥–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {stock_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ. –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {stock_price}")
        else:
            stock_price = await get_stock_price_world(stock_id)
            if stock_price is not None:
                await message.reply(
                    f"–¶–µ–Ω–Ω–∞—è –±—É–º–∞–≥–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {stock_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ Yahoo! Finance. –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {stock_price}")
            else:
                await message.reply(
                    f"–¶–µ–Ω–Ω–∞—è –±—É–º–∞–≥–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {stock_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ, –Ω–æ –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è –Ω–∏ –≤ "
                    f"–†–æ—Å—Å–∏–∏, –Ω–∏ –∑–∞ —Ä—É–±–µ–∂–æ–º")
    else:
        await message.reply(
            f"–¶–µ–Ω–Ω–∞—è –±—É–º–∞–≥–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {stock_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ, –Ω–∏ –Ω–∞ Yahoo! Finance.")

    await state.clear()


@stock_router.message(Command('addStock'))
async def add_stock_start(message: Message, state: FSMContext):
    await message.reply('–ü—Ä–µ—Å—Ç—É–ø–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞')
    await state.set_state(AddStockStates.StockID)


@stock_router.callback_query(F.data == "/addStock")
async def add_stock_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞')
    await state.set_state(AddStockStates.StockID)
    await callback.answer()


@stock_router.message(StateFilter(AddStockStates.StockID))
async def add_stock_price(message: Message, state: FSMContext):
    if message.text.lower() != "/stop":
        stock_exists = await check_stock_existence(message.text)
        if stock_exists:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏')
            data = await state.get_data()
            data['StockID'] = message.text
            await state.set_data(data)
            await state.set_state(AddStockStates.StockPrice)
        else:
            await message.reply(
                '–£–∫–∞–∑–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ, –Ω–∏ –Ω–∞ Yahoo! Finance.')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /stop –¥–ª—è '
                                 '–æ—Ç–º–µ–Ω—ã')
    else:
        await state.clear()
        await message.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')


@stock_router.message(StateFilter(AddStockStates.StockPrice))
async def add_stock_quantity(message: Message, state: FSMContext):
    if message.text.lower() != '/stop':
        try:
            float(message.text.replace(',', '.'))
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞')
            data = await state.get_data()
            data['StockPrice'] = message.text.replace(',', '.')
            await state.set_data(data)
            await state.set_state(AddStockStates.StockQuantity)
        except Exception as e:
            logger.info(e)
            await message.reply('–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏.')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /stop –¥–ª—è –æ—Ç–º–µ–Ω—ã"')
    else:
        await state.clear()
        await message.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')


@stock_router.message(StateFilter(AddStockStates.StockQuantity))
async def add_stock_finish(message: Message, state: FSMContext):
    if message.text.lower() != "/stop":
        try:
            int(message.text)
            data = await state.get_data()
            data['StockQuantity'] = message.text
            data['StockOwnerID'] = message.from_user.id
            data['StockPurchaseDate'] = datetime.now()
            stock_record = Stock(data['StockOwnerID'],
                                 data['StockID'],
                                 data['StockQuantity'],
                                 data['StockPrice'],
                                 data['StockPurchaseDate'])
            try:
                add_stock(stock_record)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
                await message.answer('–ë–∞–∑–∞ –Ω–µ –ø–∏—à–µ—Ç')
            await state.clear()
            await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
        except Exception as e:
            logger.info(e)
            await message.reply('–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏.')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /stop –¥–ª—è –æ—Ç–º–µ–Ω—ã"')
    else:
        await state.clear()
        await message.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')


@stock_router.callback_query(F.data == "checkPortfolioSummary")
async def check_portfolio(callback: CallbackQuery):
    current_portfolio_price, origin_portfolio_price = await calc_portfolio_diff(callback.from_user.id)
    if current_portfolio_price < origin_portfolio_price:
        absolute_profitability = f'–ü—Ä–∏–±—ã–ª—å: üìâ<b>{(current_portfolio_price - origin_portfolio_price):,.2f}</b>'
        relative_profitability = f'–∏–ª–∏ <b>{(current_portfolio_price / origin_portfolio_price - 1) * 100:,.2f}</b>'
    else:
        absolute_profitability = f'–ü—Ä–∏–±—ã–ª—å: üìà<b>{(current_portfolio_price - origin_portfolio_price):,.2f}</b>'
        relative_profitability = f'–∏–ª–∏ <b>{(current_portfolio_price / origin_portfolio_price - 1) * 100:,.2f}</b>'
    await callback.message.answer(f'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n'
                                  f'–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{origin_portfolio_price:,.2f} RUB</b>\n'
                                  f'–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{current_portfolio_price:,.2f} RUB</b>\n'
                                  f'{absolute_profitability} '
                                  f'{relative_profitability} %')
    await callback.answer()


@stock_router.message(F.text == '/checkPortfolioSummary')
async def check_portfolio(message: Message):
    current_portfolio_price, origin_portfolio_price = await calc_portfolio_diff(message.from_user.id)
    if current_portfolio_price < origin_portfolio_price:
        absolute_profitability = f'–ü—Ä–∏–±—ã–ª—å: üìâ<b>{(current_portfolio_price - origin_portfolio_price):,.2f}</b>'
        relative_profitability = f'–∏–ª–∏ <b>{(current_portfolio_price / origin_portfolio_price - 1):,.2f}</b>'
    else:
        absolute_profitability = f'–ü—Ä–∏–±—ã–ª—å: üìà<b>{(current_portfolio_price - origin_portfolio_price):,.2f}</b>'
        relative_profitability = f'–∏–ª–∏ <b>{(current_portfolio_price / origin_portfolio_price - 1):,.2f}</b>'
    await message.answer(f'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n'
                         f'–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{origin_portfolio_price:,.2f} RUB</b>\n'
                         f'–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{current_portfolio_price:,.2f} RUB</b>\n'
                         f'{absolute_profitability} '
                         f'{relative_profitability} %')
